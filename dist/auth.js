var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};Object.defineProperty(exports,"__esModule",{value:true});exports.






























prelogin=prelogin;exports.



























check=check;exports.



















































forgot=forgot;exports.

































register=register;exports.































reset=reset;var _fetch=require('./lib/fetch');var _error=require('./lib/error');var _error2=_interopRequireDefault(_error);var _cookie=require('cookie');var _cookie2=_interopRequireDefault(_cookie);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function prelogin(){var args=arguments.length<=0||arguments[0]===undefined?{}:arguments[0];var login=args.login;if(!login){return Promise.reject({message:_error2.default.INVALID_ARGUMENTS});}return (0,_fetch.post)('auth/pre-login',{login:login}).then(_fetch.postProcess);}function check(){var args=arguments.length<=0||arguments[0]===undefined?{}:arguments[0];var login=args.login;var password=args.password;if(!login||!password){return Promise.reject({message:_error2.default.INVALID_ARGUMENTS});}return (0,_fetch.post)('auth/login',{login:login,password:password}).then(function(response){var cookies=_cookie2.default.parse(response.headers.get('set-cookie'));var matched=/^https?:\/\/([^\.]+)\./.exec(response.url);var sessionName='playerme_session';if(matched){var subdomain=matched[1];sessionName=subdomain+'_'+sessionName;}var playermeSession=cookies[sessionName];return response.json().then(function(responseJSON){var resultWithSessionKey=_extends({},responseJSON,{results:_extends({},responseJSON.results,{playerme_session:playermeSession})});return Promise.resolve(resultWithSessionKey);});}).then(_fetch.postProcess);}function forgot(){var args=arguments.length<=0||arguments[0]===undefined?{}:arguments[0];var username=args.username;if(!username){return Promise.reject({message:_error2.default.INVALID_ARGUMENTS});}return (0,_fetch.post)('auth/forgot',{username:username}).then(_fetch.postProcess).then(function(){return Promise.resolve({message:'Successful!'});});}function register(){var args=arguments.length<=0||arguments[0]===undefined?{}:arguments[0];var username=args.username;var email=args.email;var password=args.password;var confirm=args.confirm;if(!(username&&email&&password&&confirm)){return Promise.reject({message:_error2.default.INVALID_ARGUMENTS});}if(password!==confirm){return Promise.reject({message:_error2.default.PASSWORD_CONFIRM_NOT_MATCHED});}return (0,_fetch.post)('auth/register',{username:username,email:email,password:password,confirm:confirm}).then(_fetch.postProcess).then(function(message){return Promise.resolve({message:message});});}function reset(){var args=arguments.length<=0||arguments[0]===undefined?{}:arguments[0];var 
code=args.code;var password=args.password;var confirm=args.confirm;

if(!(code&&password&&confirm)){
return Promise.reject({message:_error2.default.INVALID_ARGUMENTS});}


if(password!==confirm){
return Promise.reject({message:_error2.default.PASSWORD_CONFIRM_NOT_MATCHED});}


return (0,_fetch.post)('auth/reset/'+code,{password:password,confirm:confirm}).
then(_fetch.postProcess).
then(function(){return Promise.resolve({message:'Successful!'});});}